{"version":3,"sources":["Card.js","Table.js","Player.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","src","rank","suit","class","width","height","Table","cards","i","numRevealed","push","pot","Player","folded","id","position","message","chips","bet","raised","turn","strengths","round","onClick","action","highestBet","shuffledDeck","randomIndex","DECK","currentIndex","length","Math","floor","random","evaluateHand","cs","ss","v","o","s","pow","strengthValues","getStrengthArray","playerCards","tableCards","strengthArray","playerRanks","playerSuits","tableRanks","tableSuits","highestRank","concat","slice","combination","getStrengthValue","strength","deck","ranks","suits","bitwiseRanks","bitwiseSuits","image","indexOf","orderedDeck","roundName","smallestBet","positionNames","Game","state","numPlayers","button","currPlayer","nowPlaying","playersData","tableData","winnerId","nextPlayer","playerResponded","bind","newRound","onNextPlayer","initializeGame","playing","data","highestValue","winnerIDs","tableCardImages","card","this","pos","initialBet","getTwoCards","cardImages","strengthValue","firstToAct","nowPlayingCopy","setState","choice","player","nextId","playingIndex","splice","fix","toString","difference","findWinner","share","playerComponents","map","table","tableComponent","newDeckButton","gameStatus","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d00a76a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\n//Card Component: <Card rank=\"\" suit=\"\"/> (ranks: 1,2...jack,queen,king,ace; suits: clubs,spades,hearts,diamonds)\r\nfunction Card(props) {\r\n    return (\r\n      <img src={\"./cards/\" + props.rank + \"_of_\" + props.suit + \".png\"} class=\"center\" width=\"100\" height=\"150\"/>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\n\r\n//Table Component\r\n//props={cards, pot, numRevealed}\r\nfunction Table (props) {\r\n    const cards = []\r\n    for (let i=0; i<props.numRevealed; i++) {cards.push(props.cards[i])}\r\n\r\n    return (\r\n        <div>\r\n            <h2>Table</h2>\r\n            <div>\r\n                {cards}\r\n            </div>\r\n            <h3>Pot: {props.pot}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React from \"react\";\r\n\r\n//Player Component\r\n//props={id, position, chips, bet, message, cards, turn, action, folded, strengths, round, highestBet}\r\nfunction Player(props) {\r\n    if (!props.folded) {\r\n        return (\r\n            <div>\r\n                <h3>Player{props.id} [{props.position}] [Chips:{props.chips}] [Bet:{props.bet}] {props.message} {(props.raised>0) && <div>Raise bet to:{props.raised+props.bet}</div>}</h3> \r\n                {\r\n                    props.turn &&\r\n                    <div>\r\n                    <div>\r\n                        {props.cards} {props.strengths[props.round]}\r\n                    </div>\r\n                        <button onClick={() => props.action(props.id, \"Check/Call\")}>Check/Call</button>\r\n                        <button onClick={() => props.action(props.id, \"Fold\")}>Fold</button>\r\n                        {(props.bet+props.raised > props.highestBet) && <button onClick={() => props.action(props.id, \"Raise\")}>Raise</button>}\r\n                        <button onClick={() => props.action(props.id, \"Increase\")}>Increase bet amount</button>\r\n                    </div>\r\n                }\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Player{props.id} [{props.position}] {props.message} [Chips:{props.chips}] [Bet:{props.bet}]</h3>\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player","import React from \"react\";\r\nimport './App.css';\r\nimport Card from \"./Card\"\r\nimport Table from \"./Table\"\r\nimport Player from \"./Player\"\r\n\r\n//return an organized deck of 52 cards\r\nfunction orderedDeck() {\r\n    const deck=[]\r\n    const ranks=[\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"jack\",\"queen\",\"king\",\"ace\"]\r\n    const suits=[\"clubs\",\"hearts\",\"diamonds\",\"spades\"]\r\n    const bitwiseRanks = [2,3,4,5,6,7,8,9,10,11,12,13,14]\r\n    const bitwiseSuits = [1,4,2,8] \r\n    for (const suit of suits) {\r\n        for (const rank of ranks) {\r\n            deck.push({image: <Card rank={rank} suit={suit}/>, rank: bitwiseRanks[ranks.indexOf(rank)], suit: bitwiseSuits[suits.indexOf(suit)]})\r\n        }\r\n    }\r\n    return deck\r\n}\r\n//return an array of randomized 52 cards\r\nfunction shuffledDeck() {\r\n    const shuffledDeck = DECK\r\n    //shuffling algorithm I found online\r\n    let currentIndex = shuffledDeck.length,  randomIndex;\r\n    while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        [shuffledDeck[currentIndex], shuffledDeck[randomIndex]] = [\r\n        shuffledDeck[randomIndex], shuffledDeck[currentIndex]];\r\n    }\r\n    return shuffledDeck;\r\n}\r\n\r\n//hand rank calculator(algorithm I found online. Not Readable. know how to use it) \r\nfunction evaluateHand(cs, ss) {  //usage: evaluateHand([A,10,J,K,Q],[C,C,C,C,C]), return the name of the hand\r\n    var pokerHands = [\"4 of a Kind\", \"Straight Flush\",\"Straight\",\"Flush\",\"High Card\",\"1 Pair\",\"2 Pair\",\"Royal Flush\", \"3 of a Kind\",\"Full House\"];\r\n    var v,i,o,s = 1 << cs[0] | 1 << cs[1] | 1 << cs[2] | 1 << cs[3] | 1 << cs[4];\r\n    for (i = -1, v = o = 0; i < 5; i++, o = Math.pow(2, cs[i] * 4)) {v += o * ((v / o & 15) + 1);}\r\n    v = v % 15 - ((s / (s & -s) == 31) || (s == 0x403c) ? 3 : 1);\r\n    v -= (ss[0] == (ss[1] | ss[2] | ss[3] | ss[4])) * ((s == 0x7c00) ? -5 : 1);\r\n    return pokerHands[v];\r\n}\r\n\r\nconst strengthValues = {\"High Card\":0, \"1 Pair\":1, \"2 Pair\":2, \"3 of a Kind\":3, \"Straight\":4, \"Flush\":5, \"Full House\":6, \"4 of a Kind\":7, \"Straight Flush\":8, \"Royal Flush\":9}\r\n\r\n//return an array containing a player's highest hand strength in each betting round\r\nfunction getStrengthArray(playerCards, tableCards) {\r\n    const strengthArray = [] \r\n\r\n    const playerRanks = [playerCards[0][\"rank\"], playerCards[1][\"rank\"]]\r\n    const playerSuits = [playerCards[0][\"suit\"], playerCards[1][\"suit\"]]\r\n    const tableRanks = [tableCards[0][\"rank\"], tableCards[1][\"rank\"], tableCards[2][\"rank\"], tableCards[3][\"rank\"], tableCards[4][\"rank\"]]\r\n    const tableSuits = [tableCards[0][\"suit\"], tableCards[1][\"suit\"], tableCards[2][\"suit\"], tableCards[3][\"suit\"], tableCards[4][\"suit\"]]\r\n    \r\n    strengthArray.push(playerRanks[0]===playerRanks[1] ? \"1 Pair\" : \"High Card\") //pre-flop: only check if player has pair\r\n    let highestRank = evaluateHand(playerRanks.concat(tableRanks.slice(0,3)), playerSuits.concat(tableSuits.slice(0,3)))\r\n    strengthArray.push(highestRank) //flop: one possible combination of player cards and table cards\r\n    const threeOutFour = [[0,1,3],[0,2,3],[1,2,3]] //possible combinations of 3 elements out of 4 elements, excluding [0, 1, 2]\r\n    const threeOutFive = [[0,1,4],[0,2,4],[0,3,4],[1,2,4],[1,3,4],[2,3,4]] //possible combinations of 3 elements out of 5 elements, excluding previous 4 combinations\r\n    for (const combination of threeOutFour) {  \r\n        const rank = evaluateHand(playerRanks.concat([tableRanks[combination[0]],tableRanks[combination[1]],tableRanks[combination[2]]]), playerSuits.concat([tableSuits[combination[0]],tableSuits[combination[1]],tableSuits[combination[2]]]))\r\n        if (strengthValues[rank]>strengthValues[highestRank]) highestRank = rank\r\n    }\r\n    strengthArray.push(highestRank) //Turn\r\n    for (const combination of threeOutFive) {\r\n        const rank = evaluateHand(playerRanks.concat([tableRanks[combination[0]],tableRanks[combination[1]],tableRanks[combination[2]]]), playerSuits.concat([tableSuits[combination[0]],tableSuits[combination[1]],tableSuits[combination[2]]]))\r\n        if (strengthValues[rank]>strengthValues[highestRank]) highestRank = rank       \r\n    }\r\n    strengthArray.push(highestRank) //River\r\n    strengthArray.push(highestRank) //Showdown\r\n\r\n    return strengthArray\r\n}\r\n\r\n//return an integer to represent the strength for ease of comparison between hands \r\nfunction getStrengthValue(strength, cards, tableCards) {\r\n    const base = 10*(cards[0][\"rank\"]+cards[1][\"rank\"]+tableCards[0][\"rank\"]+tableCards[1][\"rank\"]+tableCards[2][\"rank\"]+tableCards[3][\"rank\"]+tableCards[4][\"rank\"])\r\n    return base+10**strengthValues[strength]\r\n}\r\n\r\n//Some game constants\r\nconst DECK = orderedDeck()\r\nconst roundName = [\"PreFlop\", \"Flop\", \"Turn\", \"River\", \"Showdown\"]\r\nconst smallestBet = 60 //the smallest amount of chips small blind has to bet\r\nconst NUM_PLAYERS = 5\r\nconst positionNames = [\"Button\", \"SB\", \"BB\"]\r\n\r\nconst initialChips = 1200\r\n\r\n//Game Component\r\nclass Game extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state={\r\n            numPlayers: NUM_PLAYERS, //number of players\r\n            button: 0, //the player id of the button of a poker game\r\n            currPlayer: 3, //who's turn (probably unnecessary)\r\n            deck: shuffledDeck(), //a list of obj = {image: <Card .../>, rank: 0~12, suit: string}\r\n            round: 0,\r\n            nowPlaying: [], //a list of ids of players who haven't folded or busted. Index 0 goes first at the start of a betting round.\r\n            highestBet: smallestBet*2,\r\n            \r\n            playersData: [], // a list of obj = {id:, position:, chips:, bet:, message:, cards:, turn:, action:, folded:}\r\n            tableData: null, //{cards: , pot: , numRevealed: } (numRevealed: number of cards revealed)\r\n            winnerId: null,\r\n            message: null,\r\n            nextPlayer: false,\r\n        }\r\n        //activate class functions that use setState\r\n        this.playerResponded = this.playerResponded.bind(this)\r\n        this.newRound = this.newRound.bind(this)\r\n        this.onNextPlayer = this.onNextPlayer.bind(this)\r\n        this.initializeGame()\r\n    }\r\n\r\n    getTwoCards(id, deck) {return [deck[id], deck[51-id]]} //get two cards from the top and bottom of the ramdomized deck.\r\n\r\n    //return a list of player/players who can win the pot\r\n    findWinner(playing, data) {\r\n        const nowPlaying = playing\r\n        const playersData = data\r\n        //find highest strength value\r\n        let highestValue = playersData[nowPlaying[0]][\"strengthValue\"]\r\n        for (const id of nowPlaying) {\r\n            if (playersData[id][\"strengthValue\"] > highestValue) highestValue = playersData[id][\"strengthValue\"] \r\n        }\r\n        //find which players have the highest value\r\n        const winnerIDs = []\r\n        for (const id of nowPlaying) {\r\n            if (playersData[id][\"strengthValue\"] === highestValue) winnerIDs.push(id)\r\n        }\r\n        return winnerIDs\r\n    }\r\n\r\n    initializeGame() {\r\n        //initialize table\r\n        const tableCardImages = []\r\n        const tableCards = []\r\n        for (let i=0; i<5; i++) {\r\n            const card = this.state.deck[52/2+i*Math.pow(-1,i)]\r\n            tableCardImages.push(card[\"image\"])\r\n            tableCards.push(card)\r\n        }     \r\n        this.state.tableData = {cards: tableCardImages, pot: smallestBet*3, numRevealed: 0}\r\n\r\n        //initialize players\r\n        const playersData = []\r\n        const numPlayers = this.state.numPlayers\r\n        for (let i=0; i<numPlayers; i++) {   \r\n            let pos = null\r\n            let initialBet = 0\r\n            let chips = initialChips\r\n            const button = this.state.button\r\n            if (button===i) pos=positionNames[0]\r\n            if (button+1===i || button+1-numPlayers===i) {\r\n                pos=positionNames[1]\r\n                initialBet=smallestBet\r\n                chips -= initialBet\r\n            }\r\n            if (button+2===i || button+2-numPlayers===i) {\r\n                pos=positionNames[2]  \r\n                initialBet=smallestBet*2   \r\n                chips -= initialBet     \r\n            }\r\n            const cards = this.getTwoCards(i, this.state.deck)\r\n            const cardImages = [cards[0][\"image\"], cards[1][\"image\"]]\r\n            const strengths = getStrengthArray(cards, tableCards)\r\n\r\n            playersData.push({id: i, position: pos, chips: chips, bet: initialBet, message: null, \r\n                cards: cardImages, turn: false, action: this.playerResponded, folded: false, strengths: strengths, \r\n                strengthValue: getStrengthValue(strengths[4], cards, tableCards), raised: 0\r\n            })\r\n        }\r\n        //populate nowPlaying array starting from currPlayer\r\n        for (let i=this.state.currPlayer; i<playersData.length; i++) {this.state.nowPlaying.push(i)}\r\n        for (let i=0; i<this.state.currPlayer; i++) {this.state.nowPlaying.push(i)}\r\n\r\n        playersData[this.state.currPlayer][\"turn\"] = true\r\n        this.state.playersData = playersData\r\n    } \r\n\r\n    \r\n    //a new round (not a new betting round), new deck, but only players who haven't busted remain \r\n    newRound() {\r\n        const deck = shuffledDeck()\r\n        const playersData = [...this.state.playersData]\r\n        let nowPlaying = []\r\n        const tableData = {...this.state.tableData} //need new cards, reset numRevealed\r\n        let button = null\r\n        playersData[this.state.button][\"position\"] = null //null current button\r\n\r\n        //update table data\r\n        tableData[\"numRevealed\"] = 0\r\n        const tableCardImages = []\r\n        const tableCards = []\r\n        for (let i=0; i<5; i++) {\r\n            const card = this.state.deck[52/2+i*Math.pow(-1,i)]\r\n            tableCardImages.push(card[\"image\"])\r\n            tableCards.push(card)\r\n        }     \r\n        tableData[\"cards\"] = tableCardImages\r\n        tableData[\"pot\"] = smallestBet*3\r\n\r\n        //Find the next button\r\n        for (let i=this.state.button+1; i<playersData.length; i++) {\r\n            if (playersData[i][\"chips\"] !== 0) {\r\n                button = i\r\n                break\r\n            }\r\n        } if (!button) { //if not found in the second half of the array, find in the first half\r\n            for (let i=0; i<this.state.button; i++) {\r\n                if (playersData[i][\"chips\"] !== 0) {\r\n                    button = i\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        //populate nowPlaying with remaining players \r\n        for (let i=button; i<playersData.length; i++) {\r\n            if (playersData[i][\"chips\"] !== 0) nowPlaying.push(playersData[i][\"id\"])\r\n        } for (let i=0; i<button; i++) {\r\n            if (playersData[i][\"chips\"] !== 0) nowPlaying.push(playersData[i][\"id\"])\r\n        }\r\n\r\n        //find who's first to act\r\n        let firstToAct //the index of the first player to act in nowPlaying array\r\n        //positions are named differently for certain number of players remaining\r\n        if (nowPlaying.length > 3) {\r\n            firstToAct = 3\r\n            playersData[nowPlaying[0]][\"position\"] = positionNames[0]\r\n            playersData[nowPlaying[1]][\"position\"] = positionNames[1]\r\n            playersData[nowPlaying[2]][\"position\"] = positionNames[2]\r\n        } else if (nowPlaying.length > 1) {\r\n            firstToAct = 0\r\n            if (nowPlaying.length===3) {\r\n                playersData[nowPlaying[0]][\"position\"] = positionNames[0]\r\n                playersData[nowPlaying[1]][\"position\"] = positionNames[1]\r\n                playersData[nowPlaying[2]][\"position\"] = positionNames[2]\r\n            } else { //when there are only two players, the button becomes the small blind, and the other player is the big blind\r\n                playersData[nowPlaying[0]][\"position\"] = positionNames[1]\r\n                playersData[nowPlaying[1]][\"position\"] = positionNames[2]               \r\n            } \r\n        } else { } //game ends when there is only one player with chips remaining\r\n        \r\n\r\n        //rearrange nowPlaying by having first to act player stay at index 0\r\n        const nowPlayingCopy = []\r\n        for (let i=firstToAct; i<nowPlaying.length; i++) nowPlayingCopy.push(nowPlaying[i])\r\n        for (let i=0; i<firstToAct; i++) nowPlayingCopy.push(nowPlaying[i])\r\n        nowPlaying = nowPlayingCopy\r\n        \r\n        //update remaining players' other properties\r\n        for (const id of nowPlaying) {\r\n            const cards = this.getTwoCards(id, deck)\r\n            const cardImages = [cards[0][\"image\"], cards[1][\"image\"]]\r\n            playersData[id][\"cards\"] = cardImages\r\n            playersData[id][\"message\"] = null\r\n            playersData[id][\"turn\"] = id === nowPlaying[0] ? true : false\r\n            playersData[id][\"folded\"] = false\r\n            playersData[id][\"bet\"] = 0\r\n            const strengths = getStrengthArray(cards, tableCards)\r\n            playersData[id][\"strengths\"] = strengths\r\n            playersData[id][\"strengthValue\"] = getStrengthValue(strengths, cards, tableCards)\r\n            playersData[id][\"raised\"] = 0\r\n            if (playersData[id][\"position\"]===\"SB\") {\r\n                playersData[id][\"bet\"] = smallestBet\r\n                playersData[id][\"chips\"] -= smallestBet\r\n            } else if (playersData[id][\"position\"]===\"BB\") {\r\n                playersData[id][\"bet\"] = smallestBet*2\r\n                playersData[id][\"chips\"] -= smallestBet*2          \r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            numPlayers: NUM_PLAYERS, round: 0, playersData: playersData, nowPlaying: nowPlaying, \r\n            tableData: tableData, highestBet: 0, deck: deck, currPlayer: nowPlaying[firstToAct], highestBet: 2*smallestBet\r\n        })\r\n    }\r\n\r\n    onNextPlayer() {\r\n        const playersData = [...this.state.playersData]\r\n        playersData[this.state.currPlayer][\"turn\"] = true\r\n        this.setState({playersData: playersData, nextPlayer: false})\r\n    }\r\n\r\n    playerResponded(id, choice) {\r\n        const playersData = [...this.state.playersData] //assigned by value\r\n        const player = playersData[id] //assigned by reference \r\n        let highestBet = this.state.highestBet\r\n\r\n        if (choice === \"Increase\") { //increase bet\r\n            if (player[\"bet\"]+player[\"raised\"] < player[\"chips\"]) {\r\n                player[\"raised\"] += smallestBet\r\n                if (player[\"bet\"]+player[\"raised\"] === player[\"chips\"]) player[\"message\"] = \"All in\"\r\n            }\r\n            if (player[\"bet\"]+player[\"raised\"]<highestBet) player[\"raised\"] = highestBet - player[\"bet\"] + smallestBet\r\n            this.setState({playersData: playersData})\r\n        } else { \r\n            const tableData = {...this.state.tableData} //assigned by value\r\n            const nowPlaying = [...this.state.nowPlaying]\r\n            let round = this.state.round\r\n            \r\n\r\n            //search next player's id\r\n            const playingIndex = nowPlaying.indexOf(id)\r\n            let nextId\r\n            if (playingIndex === nowPlaying.length-1) {\r\n                nextId = nowPlaying[0]\r\n                round += 1\r\n            } else nextId = nowPlaying[playingIndex+1]\r\n\r\n            //these are actions that end a player's turn\r\n            if (choice === \"Fold\") {\r\n                player[\"folded\"] = true \r\n                player[\"message\"] = \"folded\"\r\n                nowPlaying.splice(nowPlaying.indexOf(id), 1) //remove from player list\r\n                //collect bet\r\n                let fix = 0 //if one of the blinds folds, don't collect again the bet they already contribute at the beginning of the betting round\r\n                if (player[\"position\"]===\"SB\") fix = smallestBet\r\n                else if (player[\"position\"]===\"BB\") fix = smallestBet*2\r\n                tableData[\"pot\"] += player[\"bet\"] - fix\r\n                player[\"chips\"] -= player[\"bet\"] - fix\r\n                \r\n                if (nowPlaying.length === 1) { //end this game round early if all except one player folded\r\n                    playersData[nowPlaying[0]][\"chips\"] += tableData[\"pot\"] \r\n                    const message = \"Player\" + nowPlaying[0].toString() + \" won the pot of \" + tableData[\"pot\"].toString() + \" chips!!!\"\r\n                    tableData[\"pot\"] = 0\r\n                    this.setState({playersData: playersData, tableData: tableData, currPlayer: nextId, nowPlaying: nowPlaying, round: 4, message: message})\r\n                    return\r\n                }\r\n            } else { \r\n                if (choice === \"Check/Call\") {\r\n                    //set current player's bet to match highest bet\r\n                    let difference = highestBet - player[\"bet\"] \r\n                    if (difference + player[\"bet\"] >= player[\"chips\"]) { //if proposed bet amount is greater than the amount of the chips the player has\r\n                        difference = player[\"chips\"] - player[\"bet\"]\r\n                        player[\"message\"] = \"All in\"\r\n                    }\r\n                    //collect bet\r\n                    player[\"bet\"] += difference\r\n                    tableData[\"pot\"] += difference \r\n                    player[\"chips\"] -= difference\r\n                } else {//Raise\r\n                    player[\"chips\"] -= player[\"raised\"]\r\n                    tableData[\"pot\"] += player[\"raised\"]\r\n                    player[\"bet\"] += player[\"raised\"]  \r\n                    highestBet = player[\"bet\"]   \r\n                }\r\n                player.raised = 0   \r\n            }\r\n            //end current player's turn \r\n            player[\"turn\"] = false\r\n\r\n            //check if the next round should begin\r\n            let message = \"\"\r\n            if (round !== this.state.round) {\r\n                if (round === 1) tableData[\"numRevealed\"] = 3 //Flop\r\n                else if (round === 2) tableData[\"numRevealed\"] = 4 //Turn    \r\n                else if (round === 3) tableData[\"numRevealed\"] = 5 //River\r\n                else { //Showdown, find winner, distribute pot\r\n                    const winnerIDs = this.findWinner(nowPlaying, playersData) \r\n                    if (winnerIDs.length === 1) {\r\n                        message = \"Player\" + winnerIDs[0].toString() + \" won the pot of \" + tableData[\"pot\"].toString() + \" chips!!!\"\r\n                        playersData[winnerIDs[0]][\"chips\"] += tableData[\"pot\"]\r\n                    } else { //split the pot if more than one player win\r\n                        const share = tableData[\"pot\"] / winnerIDs.length\r\n                        for (const id of winnerIDs) {\r\n                            playersData[id][\"chips\"] += share\r\n                            message += \"Player\" + id.toString() + \", \"\r\n                        }\r\n                        message += \"share the pot of \" + tableData[\"pot\"].toString() + \" chips!!!\"\r\n                    } \r\n                    tableData[\"pot\"] = 0\r\n                }\r\n            }\r\n\r\n            this.setState({playersData: playersData, tableData: tableData, currPlayer: nextId, nowPlaying: nowPlaying, round: round, message: message, highestBet: highestBet, nextPlayer: true})\r\n        }\r\n    }\r\n\r\n    render()  {\r\n        //use playersData to map an array of Player Components\r\n        const playerComponents = this.state.playersData.map(player => <Player id={player.id} \r\n            position={player.position}\r\n            chips={player.chips}\r\n            bet={player.bet}\r\n            highestBet={this.state.highestBet}\r\n            message={player.message}\r\n            cards={player.cards}\r\n            turn={player.turn}\r\n            action={player.action}\r\n            folded={player.folded}\r\n            strengths={player.strengths}\r\n            round={this.state.round}\r\n            raised={player.raised}\r\n        />)\r\n        const table = this.state.tableData\r\n        const tableComponent = <Table cards={table[\"cards\"]} pot={table[\"pot\"]} numRevealed={table.numRevealed}/>\r\n        const newDeckButton = <div><h1>{this.state.message}</h1><button onClick={this.newRound}>New Deck</button></div>\r\n        const gameStatus = <h4>Current Player:{this.state.currPlayer} Betting Round:{roundName[this.state.round]}</h4>\r\n\r\n        return (\r\n            <div>\r\n                <hr/>\r\n                {tableComponent}\r\n                <hr/>\r\n                {playerComponents}\r\n                {this.state.round===4 ? newDeckButton : gameStatus}\r\n                {this.state.nextPlayer &&  <button onClick={this.onNextPlayer}>Next Player</button>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends React.Component {\n  render()  {\n    return (\n      <div>\n        <h1>POKER</h1>\n        <Game/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}